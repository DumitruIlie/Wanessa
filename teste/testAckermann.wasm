(module
	(func $Ackermann (param $M i32 $N i32) (result i32)
		(
			if (result i32) (i32.eqz (local.get $M))
			(then
				i32.add (local.get $N) (i32.const 1)
			)
			(else
				if (result i32) (i32.eqz (local.get $N))
				(then
					call $Ackermann (i32.sub (local.get $M) (i32.const 1)) (i32.const 1)
				)
				(else
					call $Ackermann (i32.sub (local.get $M) (i32.const 1)) (
						call $Ackermann (local.get $M) (i32.sub (local.get $N) (i32.const 1))
					)
				)
			)
		)
	)
	
	(call $Ackermann (i32.const 0) (i32.const 0))
	(print)
	(call $Ackermann (i32.const 0) (i32.const 1))
	(print)
	(call $Ackermann (i32.const 0) (i32.const 2))
	(print)
	(call $Ackermann (i32.const 0) (i32.const 3))
	(print)
	(call $Ackermann (i32.const 0) (i32.const 4))
	(print)
	(call $Ackermann (i32.const 0) (i32.const 5))
	(print) (leveldrop)
	(call $Ackermann (i32.const 1) (i32.const 0))
	(print)
	(call $Ackermann (i32.const 1) (i32.const 1))
	(print)
	(call $Ackermann (i32.const 1) (i32.const 2))
	(print)
	(call $Ackermann (i32.const 1) (i32.const 3))
	(print)
	(call $Ackermann (i32.const 1) (i32.const 4))
	(print)
	(call $Ackermann (i32.const 1) (i32.const 5))
	(print) (leveldrop)
	(call $Ackermann (i32.const 2) (i32.const 0))
	(print)
	(call $Ackermann (i32.const 2) (i32.const 1))
	(print)
	(call $Ackermann (i32.const 2) (i32.const 2))
	(print)
	(call $Ackermann (i32.const 2) (i32.const 3))
	(print)
	(call $Ackermann (i32.const 2) (i32.const 4))
	(print)
	(call $Ackermann (i32.const 2) (i32.const 5))
	(print) (leveldrop)
	(call $Ackermann (i32.const 3) (i32.const 0))
	(print)
	(call $Ackermann (i32.const 3) (i32.const 1))
	(print)
	(call $Ackermann (i32.const 3) (i32.const 2))
	(print)
	(call $Ackermann (i32.const 3) (i32.const 3))
	(print)
	(call $Ackermann (i32.const 3) (i32.const 4))
	(print) (leveldrop)
	(call $Ackermann (i32.const 4) (i32.const 0))
	(print) (leveldrop)
)