i32 tipare functii:

(func (export "name") (param $x i32) (param $y i32) (result i32) (i32.name (local.get $x) (local.get $y)))
-format specific la majoritatea functiilor

(func (export "name") (param $x i32) (result i32) (i32.name (local.get $x)))
-format specific pentru functiile clz, ctz, popcnt, extend8_s, extend16_s, eqz

(assert_return (invoke "name" (i32.const 0) (i32.const -1)) (i32.const 0))
-format specific la majoritatea functiilor(cred ca fix la functiile care intra in prima categorie la func), numerele pot fi in baza 10 sau in baza 16,si da sunt si combinate la unele apeluri

(assert_return (invoke "name" (i32.const 0xfedc_8000)) (i32.const 0))
-format specific pentru functiile din a doua categorie de la func, numerele pot fi in baza 10 sau in baza 16 si de alea cu _ care nuj exact ce sunt,si da sunt si combinate la unele apeluri


(assert_trap (invoke "div_s" (i32.const 0x80000000) (i32.const -1)) "integer overflow")
-apare doar la div_s

(assert_trap (invoke "name" (i32.const 1) (i32.const 0)) "integer divide by zero")
-apare doar la div_s,div_u,rem_s,rem_u

assert_invalid
-foarte alambicat si foarte multe formate si specifice, nu cred ca are sens sa dau copy paste de acolo, se poate face direct la implementare

(assert_malformed
  (module quote "(func (result i32) (i32.const nan:arithmetic))")
  "unexpected token"
)
(assert_malformed
  (module quote "(func (result i32) (i32.const nan:canonical))")
  "unexpected token"
)
-singurele 2 functii de acest tip
