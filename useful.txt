Outdated dar ince folositor: https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format
Tutorial pentru interpretor in general: https://www.youtube.com/watch?v=8OYqvwQlJVI&list=PLGNbPb3dQJ_4WT_m3aI3T2LRf2R_FKM2k
De notat: parametri si return-ul pot fi multipli si pot fi declarati in aceasi paranteza (param i32 i32)
De notat: local=parametri+variabile locale in aceasta ordine. Pot fi redenumiti la $nume daca se doreste (param $x i32)
De notat: tutorialul spune ca ai push si pop pe stiva automat, iar o operatie ia automat de pe stiva, nu are parametri, in fisierele primite nu avem asa, avem parametri pentru add, sub, etc
Cred ca ar fi bine sa le luam pe rand si sa incercam sa facem interpretorul sa mearga "linie cu linie", adica sa vedem ce trebuie sa avem, de ex.: i32.add, i32.sub, etc. si apoi sa facem verificare la assert-uri
Sugerez o reformatare inainte de a rula codul, detalii in funtia reformat

Descoperire importanta: (i32.add) face suma intre 2 elemente de pe stiva; (i32.add (...) (...)) face suma celor 2 "expresii" ce urmeaza
Similar pentru drop, i32.etc, i64.etc.
Important de asemenea: if (then ...) (else ...) inseamna ca se verifica varful stivei
(block ...) restrictioneaza stiva la blocul curent
(block INSTR1 br x INSTR2) ;; br x trece peste ce urmeaza si iese din block-uri pana la al x-1-lea. br 0 iese din block-ul principal, br 1 iese din primul block "nested", ...

br_if pare ca evalueaza cele 2 chestii ce urmeaza, prima e raspunsul si a doua e conditia sub care ala e raspunsul
daca conditia e indeplinita, se returneaza valoarea/se iese din block
altfel, valoarea inca se mentine pe stiva programului si ar trebui dropata

(return INSTR ...) pare ca instructiunile ce urmeaza definesc rezultatele. Pare insa ca return se poate ignora fara probleme intrucat doar pune pe stiva niste valori, asta am face normal.

Done:
avem lipsuri in cod care nu imi dau seama ce reprezinta. I THINK IS FIXED
termina de interpretat if. I THINK IS FIXED

TO DO:
what is call_indirect, table, funcref, elem, global, mut, type, unreachable
de interpretat/gasit_workaround-uri loop, block, return si altele
va trebui sa te apuci sa limitezi scope-ul din stiva pe care il au anumite instructiuni, de ex intr-un block nu se pot accesa valori ce au fost puse pe stiva inainte de block. ;; cred ca daca adaug o noua lista in stiva programului nu va fi mare problema.
de facut assert-urile sa functioneze ;; cum trebuie si sa fie toate
simd
switch
improve the speed at which the interpretor finds the closing paranthesis