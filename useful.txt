Outdated dar ince folositor: https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format
Tutorial pentru interpretor in general: https://www.youtube.com/watch?v=8OYqvwQlJVI&list=PLGNbPb3dQJ_4WT_m3aI3T2LRf2R_FKM2k
De notat: tutorialul spune ca ai push si pop pe stiva automat, iar o operatie ia automat de pe stiva, nu are parametri, in fisierele primite nu avem asa, avem parametri pentru add, sub, etc. sunt 2 versiuni pentru fiecare tip de operatie
Cred ca ar fi bine sa le luam pe rand si sa incercam sa facem interpretorul sa mearga "linie cu linie", adica sa vedem ce trebuie sa avem, de ex.: i32.add, i32.sub, etc. si apoi sa facem verificare la assert-uri
Reformatare inainte de a rula codul, detalii in funtia tokenizer.reformat

(i32.add) face suma intre 2 elemente de pe stiva; (i32.add (...) (...)) face suma celor 2 "expresii" ce urmeaza. Similar pentru drop, i32.etc, i64.etc, aproape orice altceva
Important de asemenea: if (then ...) (else ...) inseamna ca se verifica varful stivei
(block ...) restrictioneaza stiva la blocul curent
(block INSTR1 br x INSTR2) ;; br x trece peste ce urmeaza si iese din block-uri pana la al x-1-lea. br 0 iese din block-ul principal, br 1 iese din primul block "nested", ...

br_if pare ca evalueaza cele 2 chestii ce urmeaza, prima e raspunsul si a doua e conditia sub care ala e raspunsul
daca conditia e indeplinita, se returneaza valoarea/se iese din block
altfel, valoarea se elimina de pe stiva programului si NU ar trebui dropata

(return INSTR ...) pare ca instructiunile ce urmeaza definesc rezultatele

Done:
avem lipsuri in cod care nu imi dau seama ce reprezinta. I THINK IS FIXED
termina de interpretat if. I THINK IS FIXED
va trebui sa te apuci sa limitezi scope-ul din stiva pe care il au anumite instructiuni, de ex intr-un block nu se pot accesa valori ce au fost puse pe stiva inainte de block. ;; cred ca daca adaug o noua lista in stiva programului nu va fi mare problema(PARE CORECT).
improve the speed at which the interpretor finds the closing paranthesis (O(N^2)->O(N)). DONE
simd. WORKS
switch(block). WORKS

TO DO:
what is call_indirect, table, funcref, elem, global, mut, type, unreachable - cred ca se pot ignora
de interpretat/gasit_workaround-uri loop si alte chestii
de facut assert-urile sa functioneze ;; cum trebuie si sa fie toate - momentan avem trap si return bune, problema e la invalid si malformed