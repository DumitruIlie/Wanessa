;; a fixed point is just an i32 with 1 bit for the sign, 16 bits for the integral part and 15 bits for the fractional part
;; library by Ilie Dumitru

(
	module
	
	(func $abs_fixed_32 (export "abs_fixed_32") (param $x i32) (result i32)
		(
			i32.and (local.get $x) (i32.const 0x7FFFFFFF)
		)
	)
	
	(func $flip_sign_bit_fixed_32 (export "flip_sign_bit_fixed_32") (param $x i32) (result i32)
		(
			i32.xor (local.get $x) (i32.const 0x80000000)
		)
	)
	
	(func $get_sign_bit_fixed_32 (export "get_sign_bit_fixed_32") (param $x i32) (result i32)
		(
			i32.shr_u (local.get $x) (i32.const 0x1F)
		)
	)
	
	(func $get_integral_part_fixed_32 (export "get_integral_part_fixed_32") (param $x i32) (result i32)
		(if (result i32) (call $get_sign_bit_fixed_32 (local.get $x))
			(then
				(i32.sub (i32.const 0) (i32.shr_u (i32.and (local.get $x) (i32.const 0x7FFF8000)) (i32.const 0xF)))
			)
			(else
				(i32.shr_u (i32.and (local.get $x) (i32.const 0x7FFF8000)) (i32.const 0xF))
			)
		)
	)
	
	(func $get_fractional_part_fixed_32 (export "get_fractional_part_fixed_32") (param $x i32) (result i32)
		(
			(i32.and (local.get $x) (i32.const 0x00007FFF))
		)
	)
	
	(func $floor_fixed_32_i32 (export "floor_fixed_32_i32") (param $x i32) (result i32)
		(local $ans i32)
		(
			(if (call $get_sign_bit_fixed_32 (local.get $x))
				(then
					(local.set $x (call $abs_fixed_32 (local.get $x)))
					;; x < 0
					(if (i32.and (i32.const 0x7FFF) (local.get $x))
						(then
							(local.set $ans (i32.sub (i32.const 0) (i32.add (i32.const 1) (i32.shr_u (local.get $x) (i32.const 0xF)))))
						)
						(else
							(local.set $ans (i32.sub (i32.const 0) (i32.shr_u (local.get $x) (i32.const 0xF))))
						)
					)
				)
				(else
					;; x >= 0
					(local.set $ans (i32.shr_u (local.get $x) (i32.const 0xF)))
				)
			)
			(local.get $ans)
		)
	)
	
	(func $floor_fixed_32_fixed (export "floor_fixed_32_fixed") (param $x i32) (result i32)
		(local $ans i32)
		(
			(if (call $get_sign_bit_fixed_32 (local.get $x))
				(then
					;; x < 0
					(if (i32.ne (i32.const 0) (i32.and (local.get $x) (i32.const 0x7FFF)))
						(then
							;; {x} != 0
							(local.set $ans (call $sub_fixed_32 (i32.and (i32.const 0xFFFF8000) (local.get $x)) (i32.const 0x8000)))
						)
						(else
							;; {x} == 0
							(local.set $ans (local.get $x))
						)
					)
				)
				(else
					;; x >= 0
					(local.set $ans (i32.and (local.get $x) (i32.const 0x7FFF8000)))
				)
			)
			(local.get $ans)
		)
	)
	
	(func $fixed_from_i32_32 (export "fixed_from_i32_32") (param $x i32) (result i32)
		(local $ans i32)
		(
			;; if x >= 0
			;; then
			;;		0x____YYYY -> 0x0000YYYY << 15
			;; else
			;;		0x____YYYY -> 0x0001YYYY << 15
			(if (i32.and (i32.const 0x80000000) (local.get $x))
				(then
					(local.set $ans (i32.or (i32.const 0x80000000) (i32.shl (i32.and (i32.const 0xFFFF) (i32.sub (i32.const 0) (local.get $x))) (i32.const 0xF))))
				)
				(else
					(local.set $ans (i32.shl (i32.and (i32.const 0xFFFF) (local.get $x)) (i32.const 0xF)))
				)
			)
			(local.get $ans)
		)
	)
	
	(func $add_fixed_32 (export "add_fixed_32") (param $x i32 $y i32) (result i32)
		(local $s_x i32 $s_y i32 $ans i32)
		(
			(local.set $s_x (call $get_sign_bit_fixed_32 (local.get $x)))
			(local.set $s_y (call $get_sign_bit_fixed_32 (local.get $y)))
			(local.set $x (call $abs_fixed_32 (local.get $x)))
			(local.set $y (call $abs_fixed_32 (local.get $y)))
			(if (i32.xor (local.get $s_x) (local.get $s_y))
				(then
					(if (local.get $s_x)
						(then
							;; x < 0 - y >= 0
							(if (i32.le_u (local.get $x) (local.get $y))
								(then
									;; |x| <= |y|
									(local.set $ans (i32.sub (local.get $y) (local.get $x)))
								)
								(else
									;; |x| > |y|
									(local.set $ans (i32.or (i32.const 0x80000000) (i32.sub (local.get $x) (local.get $y))))
								)
							)
						)
						(else
							;; x >= 0 - y < 0
							(if (i32.le_u (local.get $x) (local.get $y))
								(then
									;; |x| <= |y|
									(local.set $ans (i32.or (i32.const 0x80000000) (i32.sub (local.get $y) (local.get $x))))
								)
								(else
									;; |x| > |y|
									(local.set $ans (i32.sub (local.get $x) (local.get $y)))
								)
							)
						)
					)
				)
				(else
					(local.set $ans 
						(i32.or
							(i32.shl (local.get $s_x) (i32.const 0x1F))
							(i32.and (i32.const 0x7FFFFFFF) (i32.add (local.get $x) (local.get $y)))
						)
					)
				)
			)
			(local.get $ans)
		)
	)
	
	(func $sub_fixed_32 (export "sub_fixed_32") (param $x i32 $y i32) (result i32)
		(
			(call $add_fixed_32 (local.get $x) (call $flip_sign_bit_fixed_32 (local.get $y)))
		)
	)
	
	(func $mul_fixed_32 (export "mul_fixed_32") (param $x i32 $y i32) (result i32)
		(local $s_x i32 $s_y i32 $ans i32)
		(
			(local.set $s_x (call $get_sign_bit_fixed_32 (local.get $x)))
			(local.set $s_y (call $get_sign_bit_fixed_32 (local.get $y)))
			(local.set $x (call $abs_fixed_32 (local.get $x)))
			(local.set $y (call $abs_fixed_32 (local.get $y)))
			
			(i32.or
				(call $abs_fixed_32
					(i32.wrap_i64
						(i64.shr_u
							(i64.mul
								(i64.extend32_s (local.get $x))
								(i64.extend32_s (local.get $y))
							)
							(i64.const 0xF)
						)
					)
				)
				(i32.shl
					(i32.xor
						(local.get $s_x)
						(local.get $s_y)
					)
					(i32.const 0x1F)
				)
			)
		)
	)
	
	(func $print_fixed (export "print_fixed") (param $x i32)
		(local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
		(
			;; partea intreaga
			(call $get_integral_part_fixed_32 (local.get $x))
			;; zecimalele
			
			;; init
			(
				(local.set 15 (i32.const 0))
				(local.set 14 (i32.const 0))
				(local.set 13 (i32.const 0))
				(local.set 12 (i32.const 0))
				(local.set 11 (i32.const 0))
				(local.set 10 (i32.const 0))
				(local.set 9 (i32.const 0))
				(local.set 8 (i32.const 0))
				(local.set 7 (i32.const 0))
				(local.set 6 (i32.const 0))
				(local.set 5 (i32.const 0))
				(local.set 4 (i32.const 0))
				(local.set 3 (i32.const 0))
				(local.set 2 (i32.const 0))
				(local.set 1 (i32.const 0))

			)
			;; contributiile fiecarui bit
			(
				(if (i32.and (i32.const 1) (local.get $x))
					(then
						(local.set 5 (i32.add (local.get 5) (i32.const 3)))
						(local.set 7 (i32.add (local.get 7) (i32.const 5)))
						(local.set 8 (i32.add (local.get 8) (i32.const 1)))
						(local.set 9 (i32.add (local.get 9) (i32.const 7)))
						(local.set 10 (i32.add (local.get 10) (i32.const 5)))
						(local.set 11 (i32.add (local.get 11) (i32.const 7)))
						(local.set 12 (i32.add (local.get 12) (i32.const 8)))
						(local.set 13 (i32.add (local.get 13) (i32.const 1)))
						(local.set 14 (i32.add (local.get 14) (i32.const 2)))
						(local.set 15 (i32.add (local.get 15) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 2) (local.get $x))
					(then
						(local.set 5 (i32.add (local.get 5) (i32.const 6)))
						(local.set 6 (i32.add (local.get 6) (i32.const 1)))
						(local.set 8 (i32.add (local.get 8) (i32.const 3)))
						(local.set 9 (i32.add (local.get 9) (i32.const 5)))
						(local.set 10 (i32.add (local.get 10) (i32.const 1)))
						(local.set 11 (i32.add (local.get 11) (i32.const 5)))
						(local.set 12 (i32.add (local.get 12) (i32.const 6)))
						(local.set 13 (i32.add (local.get 13) (i32.const 2)))
						(local.set 14 (i32.add (local.get 14) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 4) (local.get $x))
					(then
						(local.set 4 (i32.add (local.get 4) (i32.const 1)))
						(local.set 5 (i32.add (local.get 5) (i32.const 2)))
						(local.set 6 (i32.add (local.get 6) (i32.const 2)))
						(local.set 8 (i32.add (local.get 8) (i32.const 7)))
						(local.set 10 (i32.add (local.get 10) (i32.const 3)))
						(local.set 11 (i32.add (local.get 11) (i32.const 1)))
						(local.set 12 (i32.add (local.get 12) (i32.const 2)))
						(local.set 13 (i32.add (local.get 13) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 8) (local.get $x))
					(then
						(local.set 4 (i32.add (local.get 4) (i32.const 2)))
						(local.set 5 (i32.add (local.get 5) (i32.const 4)))
						(local.set 6 (i32.add (local.get 6) (i32.const 4)))
						(local.set 7 (i32.add (local.get 7) (i32.const 1)))
						(local.set 8 (i32.add (local.get 8) (i32.const 4)))
						(local.set 10 (i32.add (local.get 10) (i32.const 6)))
						(local.set 11 (i32.add (local.get 11) (i32.const 2)))
						(local.set 12 (i32.add (local.get 12) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 16) (local.get $x))
					(then
						(local.set 4 (i32.add (local.get 4) (i32.const 4)))
						(local.set 5 (i32.add (local.get 5) (i32.const 8)))
						(local.set 6 (i32.add (local.get 6) (i32.const 8)))
						(local.set 7 (i32.add (local.get 7) (i32.const 2)))
						(local.set 8 (i32.add (local.get 8) (i32.const 8)))
						(local.set 9 (i32.add (local.get 9) (i32.const 1)))
						(local.set 10 (i32.add (local.get 10) (i32.const 2)))
						(local.set 11 (i32.add (local.get 11) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 32) (local.get $x))
					(then
						(local.set 4 (i32.add (local.get 4) (i32.const 9)))
						(local.set 5 (i32.add (local.get 5) (i32.const 7)))
						(local.set 6 (i32.add (local.get 6) (i32.const 6)))
						(local.set 7 (i32.add (local.get 7) (i32.const 5)))
						(local.set 8 (i32.add (local.get 8) (i32.const 6)))
						(local.set 9 (i32.add (local.get 9) (i32.const 2)))
						(local.set 10 (i32.add (local.get 10) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 64) (local.get $x))
					(then
						(local.set 3 (i32.add (local.get 3) (i32.const 1)))
						(local.set 4 (i32.add (local.get 4) (i32.const 9)))
						(local.set 5 (i32.add (local.get 5) (i32.const 5)))
						(local.set 6 (i32.add (local.get 6) (i32.const 3)))
						(local.set 7 (i32.add (local.get 7) (i32.const 1)))
						(local.set 8 (i32.add (local.get 8) (i32.const 2)))
						(local.set 9 (i32.add (local.get 9) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 128) (local.get $x))
					(then
						(local.set 3 (i32.add (local.get 3) (i32.const 3)))
						(local.set 4 (i32.add (local.get 4) (i32.const 9)))
						(local.set 6 (i32.add (local.get 6) (i32.const 6)))
						(local.set 7 (i32.add (local.get 7) (i32.const 2)))
						(local.set 8 (i32.add (local.get 8) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 256) (local.get $x))
					(then
						(local.set 3 (i32.add (local.get 3) (i32.const 7)))
						(local.set 4 (i32.add (local.get 4) (i32.const 8)))
						(local.set 5 (i32.add (local.get 5) (i32.const 1)))
						(local.set 6 (i32.add (local.get 6) (i32.const 2)))
						(local.set 7 (i32.add (local.get 7) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 512) (local.get $x))
					(then
						(local.set 2 (i32.add (local.get 2) (i32.const 1)))
						(local.set 3 (i32.add (local.get 3) (i32.const 5)))
						(local.set 4 (i32.add (local.get 4) (i32.const 6)))
						(local.set 5 (i32.add (local.get 5) (i32.const 2)))
						(local.set 6 (i32.add (local.get 6) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 1024) (local.get $x))
					(then
						(local.set 2 (i32.add (local.get 2) (i32.const 3)))
						(local.set 3 (i32.add (local.get 3) (i32.const 1)))
						(local.set 4 (i32.add (local.get 4) (i32.const 2)))
						(local.set 5 (i32.add (local.get 5) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 2048) (local.get $x))
					(then
						(local.set 2 (i32.add (local.get 2) (i32.const 6)))
						(local.set 3 (i32.add (local.get 3) (i32.const 2)))
						(local.set 4 (i32.add (local.get 4) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 4096) (local.get $x))
					(then
						(local.set 1 (i32.add (local.get 1) (i32.const 1)))
						(local.set 2 (i32.add (local.get 2) (i32.const 2)))
						(local.set 3 (i32.add (local.get 3) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 8192) (local.get $x))
					(then
						(local.set 1 (i32.add (local.get 1) (i32.const 2)))
						(local.set 2 (i32.add (local.get 2) (i32.const 5)))
					)
				)
				(if (i32.and (i32.const 16384) (local.get $x))
					(then
						(local.set 1 (i32.add (local.get 1) (i32.const 5)))
					)
				)
			)
			;; carry
			(
				(local.set 11 (i32.add (local.get 11) (i32.div_u (local.get 12) (i32.const 10))))
				(local.set 12 (i32.rem_u (local.get 12) (i32.const 10)))
				(local.set 10 (i32.add (local.get 10) (i32.div_u (local.get 11) (i32.const 10))))
				(local.set 11 (i32.rem_u (local.get 11) (i32.const 10)))
				(local.set 9 (i32.add (local.get 9) (i32.div_u (local.get 10) (i32.const 10))))
				(local.set 10 (i32.rem_u (local.get 10) (i32.const 10)))
				(local.set 8 (i32.add (local.get 8) (i32.div_u (local.get 9) (i32.const 10))))
				(local.set 9 (i32.rem_u (local.get 9) (i32.const 10)))
				(local.set 7 (i32.add (local.get 7) (i32.div_u (local.get 8) (i32.const 10))))
				(local.set 8 (i32.rem_u (local.get 8) (i32.const 10)))
				(local.set 6 (i32.add (local.get 6) (i32.div_u (local.get 7) (i32.const 10))))
				(local.set 7 (i32.rem_u (local.get 7) (i32.const 10)))
				(local.set 5 (i32.add (local.get 5) (i32.div_u (local.get 6) (i32.const 10))))
				(local.set 6 (i32.rem_u (local.get 6) (i32.const 10)))
				(local.set 4 (i32.add (local.get 4) (i32.div_u (local.get 5) (i32.const 10))))
				(local.set 5 (i32.rem_u (local.get 5) (i32.const 10)))
				(local.set 3 (i32.add (local.get 3) (i32.div_u (local.get 4) (i32.const 10))))
				(local.set 4 (i32.rem_u (local.get 4) (i32.const 10)))
				(local.set 2 (i32.add (local.get 2) (i32.div_u (local.get 3) (i32.const 10))))
				(local.set 3 (i32.rem_u (local.get 3) (i32.const 10)))
				(local.set 1 (i32.add (local.get 1) (i32.div_u (local.get 2) (i32.const 10))))
				(local.set 2 (i32.rem_u (local.get 2) (i32.const 10)))
			)
			;; punere pe stiva
			(
				(local.get 1)
				(local.get 2)
				(local.get 3)
				(local.get 4)
				(local.get 5)
				(local.get 6)
				(local.get 7)
				(local.get 8)
				(local.get 9)
				(local.get 10)
				(local.get 11)
				(local.get 12)
				(local.get 13)
				(local.get 14)
				(local.get 15)
			)
			(print_level)
			(leveldrop)
		)
	)
)
